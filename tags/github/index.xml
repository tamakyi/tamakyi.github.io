<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Github on 狼的公告板 ver.Hugo</title><link>https://blog.tama.guru/tags/github.html</link><description>Recent content in Github on 狼的公告板 ver.Hugo</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>tamakyi</copyright><lastBuildDate>Fri, 29 Aug 2025 09:19:30 +0000</lastBuildDate><atom:link href="https://blog.tama.guru/tags/github/index.xml" rel="self" type="application/rss+xml"/><item><title>[好软推荐] Cloudpaste-开源在线文本/文件分享平台</title><link>https://blog.tama.guru/record/cloudpaste.html</link><pubDate>Fri, 18 Jul 2025 10:21:11 +0800</pubDate><guid>https://blog.tama.guru/record/cloudpaste.html</guid><description>&lt;img src="https://images.337845818.best/20250806/6b0378c33ae92cb2cc02a8a7bce5a2fa.webp" alt="Featured image of post [好软推荐] Cloudpaste-开源在线文本/文件分享平台" />&lt;p>之前看到有人推荐了&lt;a class="link" href="https://github.com/ling-drag0n/CloudPaste" target="_blank" rel="noopener"
>cloudpaste&lt;/a>这个项目，主要作用是能够提供简单的文本及文件分享服务，前后端部分使用GitHub Action+Cloudflare Worker，存储桶部分使用Cloudflare R2等免费服务，即可实现免费使用。除了在国内因为众所周知的原因Worker域名无法访问，需要自行配置域名。&lt;/p>
&lt;p>前后端配置基本可以直接参照项目内文档：&lt;/p>
&lt;h5 id="github-仓库fork和后端配置">GitHub 仓库fork和后端配置
&lt;/h5>&lt;p>受限要将仓库fork下来，然后为fork的仓库添加变量，具体路径为仓库的&lt;code>Settings-Secrets and variables-Actions-New repository secrets&lt;/code>。添加的secrets为：&lt;/p>
&lt;ul>
&lt;li>CLOUDFLARE_API_TOKEN&lt;/li>
&lt;li>CLOUDFLARE_ACCOUNT_ID&lt;/li>
&lt;li>ENCRYPTION_SECRET&lt;/li>
&lt;/ul>
&lt;p>前面两个参数在后面获取到，后面的ENCRYPTION_SECRET可以选填，如果没有会自动生成。&lt;/p>
&lt;h5 id="cloudflare-token配置">CloudFlare TOKEN配置
&lt;/h5>&lt;p>登录CloudFlare后访问&lt;a class="link" href="https://dash.cloudflare.com/profile/api-tokens" target="_blank" rel="noopener"
>API令牌管理&lt;/a>界面，创建一个新的API令牌，模版选择&amp;quot;Cloudflare Workers&amp;quot;，并编辑内容添加D1数据库编辑权限，记录下TOKEN，即为后面要用到的&lt;code>CLOUDFLARE_API_TOKEN&lt;/code>。
&lt;code>CLOUDFLARE_ACCOUNT_ID&lt;/code>位于Cloudflare主界面的右侧。&lt;/p>
&lt;h5 id="开通d1和r2并配置pages">开通D1和R2，并配置Pages
&lt;/h5>&lt;p>D1位于左侧的存储和数据库下，的D1 SQL数据库；R2位于左侧的R2对象存储。两者都是需要点进去开通即可，其他不需要动。
D1和R2都有免费额度，可以大胆使用。&lt;/p>
&lt;h5 id="github-配置actions前端自动部署">GitHub 配置Actions前端自动部署
&lt;/h5>&lt;p>返回到GitHub仓库页，找到Actions，运行&lt;code>deploy-front-cloudflare.yml&lt;/code>这个工作流，初次运行会进行D1数据库和Pages的创建。&lt;/p>
&lt;h5 id="配置cloudflare-workers">配置CloudFlare Workers
&lt;/h5>&lt;p>Pages现在已经移动到&lt;code>计算（Workers）&lt;/code>下，找到&lt;code>Workers和Pages&lt;/code>，此时应该会看到刚才工作流创建的Pages，我的前端名称是&lt;code>cloudpaste-frontend&lt;/code>，后端为&lt;code>cloudpaste-backend&lt;/code>。
先配置&lt;code>cloudpaste-backend&lt;/code>，在项目内的&lt;code>设置-变量和机密&lt;/code>，添加一个文本类型的变量，变量名是&lt;code>ENCRYPTION_SECRET&lt;/code>，值即之前我们自己填的或者自动生成的。然后要配置&lt;code>域和路由&lt;/code>，添加一个自定义域，这里最好设置一个自己的域名（例如https://backend.tama.guru），因为默认分配的workers.dev这个域名无法直接访问，使用部分功能时会受限。
然后到配置&lt;code>cloudpaste-frontend&lt;/code>这边，也是进到&lt;code>设置&lt;/code>，找到&lt;code>变量和机密&lt;/code>，添加一个文本类型的变量，变量名是&lt;code>VITE_BACKEND_URL&lt;/code>，对应的值是刚才在&lt;code>cloudpaste-backend&lt;/code>中的&lt;code>workers.dev&lt;/code>域名或自定义的域名，注意填写末尾不带&amp;quot;/&amp;quot;。同样的，还需要在&lt;code>cloudpaste-frontend&lt;/code>的自定义域配置一个自己的域名（例如https://frontend.tama.guru），并配置好解析。&lt;/p>
&lt;h5 id="重新运行前端工作流">重新运行前端工作流
&lt;/h5>&lt;p>返回到GitHub仓库页，找到Actions，再次运行&lt;code>deploy-front-cloudflare.yml&lt;/code>这个工作流。运行完成之后之前的配置才回生效，此时可以通过https://frontend.tama.guru访问前端，而对应的后端则是https://backend.tama.guru。&lt;/p>
&lt;h5 id="完成初步配置工作">完成初步配置工作
&lt;/h5>&lt;p>访问前端地址登录后台，默认的管理员信息是：&lt;strong>用户名: admin, 密码: admin123&lt;/strong>，登录后请马上修改。&lt;/p>
&lt;h5 id="挂载s3存储">挂载S3存储
&lt;/h5>&lt;p>完成以上工作后仅能实现文本分享和编辑的功能，如果需要实现文件分享还需要配置S3存储，目前建议使用的包括R2、B2、七牛云三个，三个都有免费额度，且经过一段时间的试用相关功能都是正常的。&lt;/p>
&lt;h6 id="挂载r2存储桶">挂载R2存储桶
&lt;/h6>&lt;p>打开CloudFlare R2对象存储页面，新建一个存储桶，比如我命名为&lt;code>cloudpaste-r2&lt;/code>，并添加一个API令牌。令牌权限为读和写，制定存储桶为&lt;code>cloudpaste-r2&lt;/code>，其他不用动，保存并记录API令牌，然后点进&lt;code>cloudpaste-r2&lt;/code>存储桶，在设置下找到&lt;code>CORS策略&lt;/code>，点击编辑，内容为：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">[
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;AllowedOrigins&amp;#34;: [&amp;#34;http://localhost:3000&amp;#34;, &amp;#34;https://根据自己的前端域名来替代，比如我的https://frontend.tama.guru&amp;#34;],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;AllowedMethods&amp;#34;: [&amp;#34;GET&amp;#34;, &amp;#34;PUT&amp;#34;, &amp;#34;POST&amp;#34;, &amp;#34;DELETE&amp;#34;, &amp;#34;HEAD&amp;#34;],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;AllowedHeaders&amp;#34;: [&amp;#34;*&amp;#34;],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;ExposeHeaders&amp;#34;: [&amp;#34;ETag&amp;#34;],
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&amp;#34;MaxAgeSeconds&amp;#34;: 3600
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">]
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>然后回到前端页面的后台，在S3存储配置下添加一个新配置，&lt;code>配置名称&lt;/code>任意，为了区分我起名和r2存储桶一样的名字&lt;code>cloudpaste-r2&lt;/code>，&lt;code>提供商&lt;/code>为&lt;code>Cloudflare R2&lt;/code>，&lt;code>存储桶名称&lt;/code>即&lt;code>cloudpaste-r2&lt;/code>，&lt;code>存储容量&lt;/code>最好就保留10G，好像就免费10G？&lt;code>端点URL&lt;/code>按要求的格式填写&lt;code>https://&amp;lt;accountid&amp;gt;.r2.cloudflarestorage.com&lt;/code>，&lt;code>accountid&lt;/code>在cloudflare页面下可以找到，也就是前面所说的&lt;code>CLOUDFLARE_ACCOUNT_ID&lt;/code>。&lt;code>区域&lt;/code>根据建桶时所选的位置，我选的亚太，这里就填apac，默认填auto也可以。&lt;code>访问密钥 ID&lt;/code>和&lt;code>秘密访问密钥&lt;/code>即上面申请到的&lt;code>API令牌信息&lt;/code>，其他可以保持默认不变，保存即可。此时点击&lt;code>测试连接&lt;/code>，应该会提示：&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">配置完全可用
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">✓ 读权限正常 ✓ 写权限正常 ✓ CORS 配置正确 ✓ 前端上传模拟成功
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>如果没有配置CORS，这里会提示CORS配置不正确，上传文件时也会报错。&lt;/p>
&lt;p>最后到&lt;code>挂载管理&lt;/code>处，选择&lt;code>新建挂载点&lt;/code>，&lt;code>挂载点名称&lt;/code>也是任意的，为保持一致我使用&lt;code>cloudpaste-r2&lt;/code>，&lt;code>存储类型&lt;/code>为S3存储，&lt;code>S3存储配置&lt;/code>选择刚才创建的&lt;code>cloudpaste-r2(Cloudflare R2)&lt;/code>，&lt;code>挂载路径&lt;/code>我填写的是&lt;code>/r2&lt;/code>，根据个人情况填写即可，最后&lt;code>勾选启用状态&lt;/code>，选择创建即可。 此时在文件上传页面和挂载浏览页面都可以看到这个&lt;code>r2&lt;/code>挂载点了，可以尝试上传文件，如果提示大小超限需要到后台的&lt;code>系统设置&lt;/code>中调整&lt;code>最大上传文件大小&lt;/code>，并更新设置，该选项默认为100MB。&lt;/p>
&lt;h6 id="挂载七牛云对象存储kodo">挂载七牛云对象存储kodo
&lt;/h6>&lt;p>我以七牛云作为兼容S3标准的代表，在七牛云的对象存储中选择空间管理-新建空间，存储空间名称和R2中存储桶名称意义一致，我填写的是&lt;code>cloudpaste-qiniu&lt;/code>，存储区域选择国外任意地点（选择国内需要实名），我选择北美-洛杉矶，访问控制选择为私有。还需要配置CORS规则，点进&lt;code>cloudpaste-qiniu&lt;/code>这个桶的&lt;code>空间设置&lt;/code>，&lt;code>跨域设置&lt;/code>内&lt;code>新增规则&lt;/code>，&lt;code>来源&lt;/code>填写我们的&lt;code>前端域名https://frontend.tama.guru&lt;/code>，&lt;code>允许 Methods&lt;/code>我全勾选了，然后保存。
七牛云并没有针对存储桶有单独的API密钥，需要到&lt;code>个人中心&lt;/code>中的&lt;code>密钥管理&lt;/code>，打开&lt;code>密钥访问权限&lt;/code>，并新增一组AccessKey/SecretKey，保存好这组AK和SK。
回到网站后台，操作和前面一样，只不过提供商类型要选择其他S3兼容服务，端点URL为：&lt;code>http://存储空间名称.s3.存储区域名称.qiniucs.com&lt;/code>，根据上述配置我这里对应的是&lt;code>http://cloudpaste-qiniu.s3.us-north-1.qiniucs.com&lt;/code>，访问密钥即前面的AK，秘密访问密钥即SK，保存即可，其他参照R2的添加步骤即可。
需要注意的是，七牛云的免费套餐只支持http。&lt;/p></description></item><item><title>[插件推荐]github项目屏蔽插件</title><link>https://blog.tama.guru/software/PurifyGithubSearchPage.html</link><pubDate>Sat, 17 Feb 2024 21:46:00 +0800</pubDate><guid>https://blog.tama.guru/software/PurifyGithubSearchPage.html</guid><description>&lt;p>有时候在github上搜索，总会搜出一些不是很友好的东西（至于是什么自己随便搜一下就知道了），这些人通常会在readme里面添加一些常用的关键词，然后经常性的更新，让项目看起来“很热门”。但其实那是什么东西懂的都懂。
&lt;strong>你们不玩zz会死我不管，别污染别人眼睛。&lt;/strong>&lt;/p>
&lt;p>可以使用以下这个项目&lt;a class="link" href="https://github.com/wilson7yz/PurifyGithubSearchPage" target="_blank" rel="noopener"
>PurifyGithubSearchPage&lt;/a>，安装油猴之后直接新建一个脚本，把&lt;a class="link" href="https://raw.githubusercontent.com/wilson7yz/PurifyGithubSearchPage/main/fuckDinner.js" target="_blank" rel="noopener"
>https://raw.githubusercontent.com/wilson7yz/PurifyGithubSearchPage/main/fuckDinner.js&lt;/a>的内容复制进去保存再刷新就好了。
或者到油猴上&lt;a class="link" href="https://greasyfork.org/zh-CN/scripts/473912-github%E6%90%9C%E7%B4%A2%E5%87%80%E5%8C%96" target="_blank" rel="noopener"
>Github搜索净化&lt;/a>直接点击安装，效果一样。
如果要新增屏蔽的用户名，直接把在源码的这个地方新增就行了。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="k">const&lt;/span> &lt;span class="n">dinnerNames&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="s2">&amp;#34;xxx&amp;#34;&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>效果图：
使用前：
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://r2.337845818.best/oss-to-r2/2024/02/17/65d0b99ac2876.png">
&lt;img src="https://r2.337845818.best/oss-to-r2/2024/02/17/65d0b99ac2876.png" alt="使用前" />
&lt;/a>
&lt;/div>
&lt;img src="https://r2.337845818.best/oss-to-r2/2024/02/17/65d0b99ac2876.png"
loading="lazy"
alt="使用前"
>
使用后：
&lt;div class="post-img-view">
&lt;a data-fancybox="gallery" href="https://r2.337845818.best/oss-to-r2/2024/02/17/65d0bc62d9eb2.png">
&lt;img src="https://r2.337845818.best/oss-to-r2/2024/02/17/65d0bc62d9eb2.png" alt="使用后" />
&lt;/a>
&lt;/div>
&lt;img src="https://r2.337845818.best/oss-to-r2/2024/02/17/65d0bc62d9eb2.png"
loading="lazy"
alt="使用后"
>&lt;/p></description></item></channel></rss>